from aiogram import Router, F
from aiogram.types import Message, CallbackQuery
from aiogram import Bot
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup


from keyboards.client_kb import (
    get_client_menu,
    get_cafe_selection_keyboard,
    get_food_selection_keyboard,
    get_earn_points_inline_kb,
    get_confirmation_keyboard
)

from keyboards.staff_kb import (
    get_confirmation_keyboard_for_spend,
    get_confirmation_keyboard_for_purchase
)

from keyboards.admin_kb import get_staff_main_menu
from database import add_client, get_client, save_purchase_code, save_spend_code, get_staff_by_cafe, connect
from utils import generate_purchase_code, get_user_role
from config import CAFES
import logging

logging.basicConfig(level=logging.INFO)


class ClientStates(StatesGroup):
    selecting_action = State()  
    earning_points = State()   
    spending_points = State()
    choosing_product = State()  
    confirming_code_request = State()
    confirming_spend_request = State()


ERROR_MESSAGE = "‚ö†Ô∏è –û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."


client_router = Router()


@client_router.message(F.text == "/start")
async def cmd_start(message: Message, state: FSMContext):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É /start ‚Äî –Ω–∞—á–∞–ª–æ —Ä–∞–±–æ—Ç—ã —Å –±–æ—Ç–æ–º
    
    1. –ü–æ–ª—É—á–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    2. –î–æ–±–∞–≤–ª—è–µ—Ç –µ–≥–æ –≤ –±–∞–∑—É (–µ—Å–ª–∏ –æ–Ω –Ω–æ–≤—ã–π)
    3. –û–ø—Ä–µ–¥–µ–ª—è–µ—Ç —Ä–æ–ª—å: –∫–ª–∏–µ–Ω—Ç, –∫–∞—Å—Å–∏—Ä –∏–ª–∏ –∞–¥–º–∏–Ω
    4. –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–µ –º–µ–Ω—é
    """
    try:
        user_id = message.from_user.id
        username = message.from_user.username or ''
        full_name = message.from_user.full_name or ''
        welcome_text = f"""
üîó –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ BonusLinkerBot!

–≠—Ç–æ –¥–µ–º–æ-–≤–µ—Ä—Å–∏—è —Å–∏—Å—Ç–µ–º—ã –ª–æ—è–ª—å–Ω–æ—Å—Ç–∏.  
–í—ã –º–æ–∂–µ—Ç–µ:
‚úîÔ∏è –ü–æ–ª—É—á–∏—Ç—å –±–∞–ª–ª—ã –∑–∞ –ø–æ–∫—É–ø–∫–∏  
‚úîÔ∏è –û–±–º–µ–Ω—è—Ç—å –∏—Ö –Ω–∞ –ø–æ–¥–∞—Ä–∫–∏ –∏ —Ç–æ–≤–∞—Ä—ã  
‚úîÔ∏è –£–≤–∏–¥–µ—Ç—å, –∫–∞–∫ –ª–µ–≥–∫–æ —Ä–∞–±–æ—Ç–∞–µ—Ç —Å–∏—Å—Ç–µ–º–∞  

‚ú® –ö–∞–∫ –ø–æ–ª—É—á–∏—Ç—å –±–∞–ª–ª—ã:
‚Ä¢ –ó–∞ –∫–∞–∂–¥—ã–µ 100 ‚ÇΩ –≤ —á–µ–∫–µ ‚Äî 7 –±–∞–ª–ª–æ–≤  
‚Ä¢ –ü–æ–∫–∞–∂–∏—Ç–µ –∫–æ–¥ –∫–∞—Å—Å–∏—Ä—É –ø–æ—Å–ª–µ –ø–æ–∫—É–ø–∫–∏ 

üéÅ –ß—Ç–æ –º–æ–∂–Ω–æ –ø–æ–ª—É—á–∏—Ç—å:
üç™ –ü–µ—á–µ–Ω—å–µ ‚Äî 30 –±–∞–ª–ª–æ–≤  
üßã –ö–∞–ø—É—á–∏–Ω–æ ‚Äî 50 –±–∞–ª–ª–æ–≤  
ü•ê –ö—Ä—É–∞—Å—Å–∞–Ω ‚Äî 70 –±–∞–ª–ª–æ–≤  

üìå –ü—Ä–∏–º–µ—á–∞–Ω–∏–µ:  
–í–∞—à –±–æ–Ω—É—Å–Ω—ã–π –∫–æ–¥ –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –∫–∞—Å—Å–∏—Ä—É –ø–æ—Å–ª–µ –≤—ã–±–æ—Ä–∞ —Ç–æ—á–∫–∏.  

üî• BonusLinkerBot –ª–µ–≥–∫–æ –Ω–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç—Å—è –ø–æ–¥ –≤–∞—à –±–∏–∑–Ω–µ—Å. 
"""

        # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –∫–ª–∏–µ–Ω—Ç–∞, –µ—Å–ª–∏ –µ–≥–æ –µ—â—ë –Ω–µ—Ç –≤ –±–∞–∑–µ
        add_client(user_id, username, full_name)

        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ä–æ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        role = get_user_role(user_id)

        if role == "admin":
            await message.answer("üëÆ‚Äç‚ôÇÔ∏è –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å", reply_markup=get_staff_main_menu())

        elif role == "staff":
            await message.answer("–í—ã –≤–æ—à–ª–∏ –∫–∞–∫ –∫–∞—Å—Å–∏—Ä")

        else:
            await message.answer(welcome_text,
                reply_markup=get_client_menu()
            )
    except Exception as e:
        logging.error(f"Error in /start: {e}")
        await message.answer(ERROR_MESSAGE)
        await state.set_state(ClientStates.selecting_action)


@client_router.message(F.text == "‚ûï –ü–æ–ª—É—á–∏—Ç—å –±–∞–ª–ª—ã")
async def btn_choose_cafe(message: Message, state: FSMContext):
    """
    - –ù–∞–∂–∞—Ç–∏–µ –∫–Ω–æ–ø–∫–∏ "–ü–æ–ª—É—á–∏—Ç—å –±–∞–ª–ª—ã"
    - –ü–µ—Ä–µ–≤–æ–¥–∏—Ç –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –≤—ã–±–æ—Ä–∞ –∫–∞—Ñ–µ
    - –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∞–¥—Ä–µ—Å–∞–º–∏
    """
    logging.info(f"User {message.from_user.id} clicked 'Earn points'")
    await state.set_state(ClientStates.earning_points)
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ñ–µ:", reply_markup=get_cafe_selection_keyboard())


@client_router.message(F.text == "üí∏ –ü–æ—Ç—Ä–∞—Ç–∏—Ç—å –±–∞–ª–ª—ã")
async def ask_cafe_for_spend(message: Message, state: FSMContext):
    """
    - –ù–∞–∂–∞—Ç–∏–µ –∫–Ω–æ–ø–∫–∏ "–ü–æ—Ç—Ä–∞—Ç–∏—Ç—å –±–∞–ª–ª—ã"
    - –ü–µ—Ä–µ–≤–æ–¥–∏—Ç –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –≤—ã–±–æ—Ä–∞ –∫–∞—Ñ–µ 
    - –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∞–¥—Ä–µ—Å–∞–º–∏
    """
    await state.set_state(ClientStates.spending_points)
    await state.update_data(action="spend") 
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ñ–µ:", reply_markup=get_cafe_selection_keyboard())


@client_router.message(
    ClientStates.earning_points,
    F.text.in_(["–¶–µ–Ω—Ç—Ä–∞–ª—å–Ω–∞—è –∫–æ—Ñ–µ–π–Ω—è",
                "–ö–æ—Ñ–µ–π–Ω—è –≤ –¢–¶ ¬´–ì–∞–ª–µ—Ä–µ—è¬ª",
                "–ö–æ—Ñ–µ–π–Ω—è –Ω–∞ –í–æ–∫–∑–∞–ª–µ"])
)
async def handle_cafe_selection(message: Message, state: FSMContext):
    """
    –ö–ª–∏–µ–Ω—Ç –≤—ã–±—Ä–∞–ª –∫–∞—Ñ–µ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –±–∞–ª–ª–æ–≤:
    - –ü–æ–ª—É—á–∞–µ–º ID –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –∫–∞—Ñ–µ
    - –°–æ—Ö—Ä–∞–Ω—è–µ–º –µ–≥–æ –≤ FSM
    - –ü–µ—Ä–µ–≤–æ–¥–∏–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –≤ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫–æ–¥–∞
    """
    cafe_name = message.text
    # –ò—â–µ–º id –ø–æ –∫–∞—Ñ–µ
    cafe_id = next(
        (id for id, cafe in CAFES.items() if cafe["name"] == cafe_name),
                    None)
    
    if not cafe_id:
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –≤—ã–±–æ—Ä–∞ –∫–∞—Ñ–µ.", reply_markup=get_client_menu())
        await state.clear()
        return
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–≥–æ —à–∞–≥–∞
    await state.update_data(cafe_id=cafe_id, cafe_name=cafe_name)
    # –°–ø—Ä–∞—à–∏–≤–∞–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø–µ—Ä–µ–¥ –≥–µ–Ω–µ—Ä–∞—Ü–∏–µ–π –∫–æ–¥–∞
    await message.answer(
        f"–í—ã –≤—ã–±—Ä–∞–ª–∏: {cafe_name}. –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –∫–æ–¥–∞ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –±–∞–ª–ª–æ–≤?",
        reply_markup=get_earn_points_inline_kb()
    )
    await state.set_state(ClientStates.confirming_code_request) 


@client_router.callback_query(F.data == "confirm_earn",
                              ClientStates.confirming_code_request)
async def handle_inline_confirm(callback: CallbackQuery,
                                state: FSMContext,
                                bot: Bot):
    """
    –ö–æ–≥–¥–∞ –∫–ª–∏–µ–Ω—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ—Ç –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –∫–æ–¥–∞:
    - –ü–æ–ª—É—á–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –∏–∑ FSM
    - –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∫–æ–¥
    - –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –µ–≥–æ –∫–∞—Å—Å–∏—Ä—É –∏ –∫–ª–∏–µ–Ω—Ç—É
    
    –ï—Å–ª–∏ –≤—Å—ë –æ–∫ ‚Äî –æ—á–∏—â–∞–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    """
    try:
        data = await state.get_data()
        cafe_id = data.get("cafe_id")
        cafe_name = data.get("cafe_name")

        if not cafe_id or not cafe_name:
            await callback.answer("‚ùå –û—à–∏–±–∫–∞: –¥–∞–Ω–Ω—ã–µ –∫–∞—Ñ–µ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
            await state.clear()
            return

        code = generate_purchase_code()
        user_id = callback.from_user.id
        save_purchase_code(user_id, cafe_id, code)
        
        staff_list = get_staff_by_cafe(cafe_id)
        
        if not staff_list:
            logging.warning("‚ùå –í —ç—Ç–æ–º –∫–∞—Ñ–µ –Ω–µ—Ç –∫–∞—Å—Å–∏—Ä–æ–≤")
            await callback.message.edit_text(
                '‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–∞—Å—Å–∏—Ä–æ–≤.',
                reply_markup=get_client_menu()
            )
            await state.clear()
            return
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤—Å–µ–º –∫–∞—Å—Å–∏—Ä–∞–º
        for staff in staff_list:
            staff_id = staff[0]
            try:
                await bot.send_message(
                    staff_id,
                    f"üÜî –ö–æ–¥ –¥–ª—è –Ω–∞—á–∏—Å–ª–µ–Ω–∏—è: `{code}`\n"
                    f"üë§ –ö–ª–∏–µ–Ω—Ç: {callback.from_user.full_name}",
                    reply_markup=get_confirmation_keyboard_for_purchase(code),
                    parse_mode="Markdown"
                )
            except Exception as e:
                logging.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∫–∞—Å—Å–∏—Ä—É {staff_id}: {e}")

        await callback.message.edit_text(
            f"üî¢ –í–∞—à –∫–æ–¥: `{code}`\n"
            f"–ü–æ–∫–∞–∂–∏—Ç–µ –µ–≥–æ –∫–∞—Å—Å–∏—Ä—É –≤ {cafe_name}.",
            parse_mode="Markdown")
        
        await bot.send_message(
            callback.from_user.id,
            "‚òïÔ∏è",
            reply_markup=get_client_menu()
        )

    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–∏ –ø–æ–ª—É—á–µ–Ω–∏—è –±–∞–ª–ª–æ–≤: {e}")
        await callback.answer("‚ö†Ô∏è –û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞.")

    finally:
        await state.clear()


@client_router.callback_query(F.data == "cancel_earn",
                              ClientStates.confirming_code_request)
async def handle_inline_cancel(callback: CallbackQuery, state: FSMContext):
    """
    –ö–æ–≥–¥–∞ –∫–ª–∏–µ–Ω—Ç –æ—Ç–º–µ–Ω—è–µ—Ç –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –∫–æ–¥–∞:
    - –£–±–∏—Ä–∞–µ–º inline-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    - –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
    - –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ FSM
    """
    await callback.message.edit_text(
        "‚ùå –ó–∞–ø—Ä–æ—Å –æ—Ç–º–µ–Ω—ë–Ω.",
        reply_markup=None 
    )
    await callback.message.answer("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é",
                                  reply_markup=get_client_menu())
    await state.clear()


@client_router.message(
    ClientStates.spending_points, 
    F.text.in_([ "–¶–µ–Ω—Ç—Ä–∞–ª—å–Ω–∞—è –∫–æ—Ñ–µ–π–Ω—è",
                "–ö–æ—Ñ–µ–π–Ω—è –≤ –¢–¶ ¬´–ì–∞–ª–µ—Ä–µ—è¬ª",
                "–ö–æ—Ñ–µ–π–Ω—è –Ω–∞ –í–æ–∫–∑–∞–ª–µ"]) 
)
async def handle_spend_points(message: Message, state: FSMContext):
    """
    –ö–ª–∏–µ–Ω—Ç –≤—ã–±—Ä–∞–ª –∫–∞—Ñ–µ –¥–ª—è —Ç—Ä–∞—Ç—ã –±–∞–ª–ª–æ–≤:
    - –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ –∫–∞—Ñ–µ
    - –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ FSM
    - –ü–µ—Ä–µ–≤–æ–¥–∏–º –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –≤—ã–±–æ—Ä–∞ —Ç–æ–≤–∞—Ä–∞
    - –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å —Ç–æ–≤–∞—Ä–∞–º–∏
    """
    try:
        # 1. –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ –∫–∞—Ñ–µ
        cafe_name = message.text
        cafe_id = next(
            (id for id, cafe in CAFES.items() if cafe['name'] == cafe_name),
            None
        )
        
        # 2. –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –∫–∞—Å—Å–∏—Ä—ã –≤ —ç—Ç–æ–º –∫–∞—Ñ–µ
        staff_list = get_staff_by_cafe(cafe_id)
        if not staff_list:
            await message.answer(
                "‚ùå –í —ç—Ç–æ–º –∫–∞—Ñ–µ —Å–µ–π—á–∞—Å –Ω–µ—Ç –∫–∞—Å—Å–∏—Ä–æ–≤. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
                reply_markup=get_client_menu()
            )
            await state.clear()
            return
        
        # 3. –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ State
        await state.update_data(
            cafe_id=cafe_id,
            cafe_name=cafe_name
        )
        
        # 4. –ü–µ—Ä–µ–≤–æ–¥–∏–º –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –≤—ã–±–æ—Ä–∞ —Ç–æ–≤–∞—Ä–∞
        await state.set_state(ClientStates.choosing_product)
        
        # 5. –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å —Ç–æ–≤–∞—Ä–∞–º–∏
        await message.answer(
            '–í—ã–±–µ—Ä–∏—Ç–µ —Ç–æ–≤–∞—Ä:', 
            reply_markup=get_food_selection_keyboard()
        )
        
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –≤ handle_spend_points: {e}")
        await message.answer(ERROR_MESSAGE)
        await state.clear()
    

@client_router.message(ClientStates.choosing_product,
                        F.text.startswith(("üç™", "üßã", "ü•ê"))) 
async def handle_product_selection(message: Message,
                                    bot: Bot,
                                      state: FSMContext):
    """
    –ö–æ–≥–¥–∞ –∫–ª–∏–µ–Ω—Ç –≤—ã–±—Ä–∞–ª —Ç–æ–≤–∞—Ä –¥–ª—è —Å–ø–∏—Å–∞–Ω–∏—è –±–∞–ª–ª–æ–≤:
    - –û–ø—Ä–µ–¥–µ–ª—è–µ–º, —á—Ç–æ –æ–Ω –≤—ã–±—Ä–∞–ª
    - –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∫–∞—Å—Å–∏—Ä–æ–≤
    - –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±–æ—Ä –≤ FSM
    - –ü–æ–∫–∞–∑—ã–≤–∞–µ–º inline-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
    """
    data = await state.get_data()
    
    if 'üç™' in message.text:
        product_name = '–ü–µ—á–µ–Ω—å–µ'
        cost = 30
    elif "ü•ê" in message.text:
        product_name = '–ö—Ä—É–∞—Å—Å–∞–Ω'
        cost = 70
    else:
        product_name = '–ö–∞–ø—É—á–∏–Ω–æ'
        cost = 50

    # –ü–æ–ª—É—á–∞–µ–º –∫–∞—Ñ–µ –∏–∑ FSM
    cafe_id = data.get("cafe_id")
    if not cafe_id:
        await message.answer("‚ùå –û—à–∏–±–∫–∞: –∫–∞—Ñ–µ –Ω–µ –≤—ã–±—Ä–∞–Ω–æ.",
                              reply_markup=get_client_menu())
        await state.clear()
        return

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –∫–∞—Å—Å–∏—Ä—ã –≤ —ç—Ç–æ–º –∫–∞—Ñ–µ
    staff_list = get_staff_by_cafe(cafe_id)
    if not staff_list:
        await message.answer("‚ùå –í —ç—Ç–æ–º –∫–∞—Ñ–µ —Å–µ–π—á–∞—Å –Ω–µ—Ç –∫–∞—Å—Å–∏—Ä–æ–≤.",
                              reply_markup=get_client_menu())
        await state.clear()
        return

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±–æ—Ä –∫–ª–∏–µ–Ω—Ç–∞
    await state.update_data(
        product_name=product_name,
        cost=cost
    )

    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º inline-–ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
    await message.answer(
        f"–í—ã —Ö–æ—Ç–∏—Ç–µ –ø–æ–ª—É—á–∏—Ç—å:\n\n"
        f"üçΩ {product_name} ‚Äî <b>{cost}</b> –±–∞–ª–ª–æ–≤\n\n"
        f"–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=get_confirmation_keyboard(),
        parse_mode="HTML"
    )
    await state.set_state(ClientStates.confirming_spend_request)


@client_router.callback_query(F.data == 'confirm_spend',
                               ClientStates.confirming_spend_request)
async def handle_confirm_spend(callback: CallbackQuery,
                                bot: Bot,
                               state: FSMContext):
    """
    –ö–ª–∏–µ–Ω—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ—Ç —Å–ø–∏—Å–∞–Ω–∏–µ –±–∞–ª–ª–æ–≤:
    - –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∏–∑ FSM 
    - –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–ª–∞–Ω—Å–∞ 
    - –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–æ–¥–∞ 
    - –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –µ–≥–æ –∫–∞—Å—Å–∏—Ä—É
    - –ò–Ω—Ñ–æ—Ä–º–∏—Ä—É–µ–º –∫–ª–∏–µ–Ω—Ç–∞ –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
    """
    try:
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ FSM
        data = await state.get_data()
        user_id = callback.from_user.id
        cafe_id = data['cafe_id']
        product_name = data['product_name']
        cost = data['cost']

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–ª–∞–Ω—Å
        client = get_client(user_id)
        if not client or client[3] < cost:
            await callback.answer("‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –±–∞–ª–ª–æ–≤!")
            await callback.message.edit_text("‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –±–∞–ª–ª–æ–≤.", reply_markup=None)
            await state.clear()
            return
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –∫–æ–¥
        code = generate_purchase_code()
        save_spend_code(user_id, code, cost)


        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–æ–¥ –∫–∞—Å—Å–∏—Ä–∞–º
        staff_list = get_staff_by_cafe(cafe_id)
        for staff in staff_list:
            try:
                await bot.send_message(
                    staff[0],
                    f"üÜî –ö–æ–¥: `{code}`\n"
                    f"üçΩ –¢–æ–≤–∞—Ä: {product_name} ({cost} –±–∞–ª–ª–æ–≤)\n"
                    f"üë§ –ö–ª–∏–µ–Ω—Ç: {callback.from_user.full_name}",
                    reply_markup=get_confirmation_keyboard_for_spend(code, cost),
                    parse_mode="Markdown"
                )
            except Exception as e:
                logging.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∫–∞—Å—Å–∏—Ä—É {staff[0]}: {e}")

        # –°–æ–æ–±—â–µ–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç—É
        await callback.message.edit_text(
            f"üî¢ –í–∞—à –∫–æ–¥: `{code}`\n"
            f"–ü–æ–∫–∞–∂–∏—Ç–µ –µ–≥–æ –∫–∞—Å—Å–∏—Ä—É –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è {product_name}.",
            reply_markup=None,
            parse_mode="Markdown"
        )

        # –í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
        await bot.send_message(user_id, "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=get_client_menu())

    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–∏ —Å–ø–∏—Å–∞–Ω–∏—è: {e}")
        await callback.answer("‚ö†Ô∏è –û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞.")
    finally:
        await state.clear()


@client_router.callback_query(F.data == "cancel_spend",
                              ClientStates.confirming_spend_request)
async def handle_cancel_spend(callback: CallbackQuery, state: FSMContext):
    """
    –ö–ª–∏–µ–Ω—Ç –æ—Ç–º–µ–Ω—è–µ—Ç –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –∫–æ–¥–∞:
    - –£–±–∏—Ä–∞–µ–º inline-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    - –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
    - –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ FSM
    """
    await callback.message.edit_text("‚ùå –ó–∞–ø—Ä–æ—Å –æ—Ç–º–µ–Ω—ë–Ω.", reply_markup=None)
    await callback.message.answer("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=get_client_menu())
    await state.clear()
    

async def generate_and_send_code(
    user_id: int,
    cafe_id: int,
    product_name: str,
    cost: int,
    bot: Bot,
    state: FSMContext
):
    """
    –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∫–æ–¥ –¥–ª—è —Å–ø–∏—Å–∞–Ω–∏—è –±–∞–ª–ª–æ–≤ –∏ –≤—ã–ø–æ–ª–Ω—è–µ—Ç:
    - –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    - –û—Ç–ø—Ä–∞–≤–∫—É –∫–∞—Å—Å–∏—Ä—É —Å inline-–∫–Ω–æ–ø–∫–æ–π
    - –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç–∞

    –ï—Å–ª–∏ –≤—Å—ë –ø—Ä–æ—à–ª–æ —É—Å–ø–µ—à–Ω–æ ‚Äî –æ—á–∏—â–∞–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    """
    try:
        data = await state.get_data()
        
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ FSM
        user_id = data["user_id"]
        cafe_id = data["cafe_id"]
        product_name = data["product_name"]
        cost = data["cost"]

        code = generate_purchase_code()

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–æ–¥ –≤ –ë–î (–¥–ª—è —Å–ø–∏—Å–∞–Ω–∏—è –±–∞–ª–ª–æ–≤)
        save_spend_code(user_id, code, cost)
        
        staff_list = get_staff_by_cafe(cafe_id)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∫–∞—Å—Å–∏—Ä–æ–≤
        if not staff_list:
            await bot.send_message(user_id, "‚ùå –í —ç—Ç–æ–º –∫–∞—Ñ–µ –Ω–µ—Ç –∫–∞—Å—Å–∏—Ä–æ–≤.")
            return
        
         # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–æ–¥ –∫–∞—Å—Å–∏—Ä–∞–º       
        for staff in staff_list:
            await bot.send_message(
                staff[0],  
                f"üÜî –ö–æ–¥: `{code}`\n"
                f"üçΩ –¢–æ–≤–∞—Ä: {product_name} ({cost} –±–∞–ª–ª–æ–≤)\n",
                reply_markup=get_confirmation_keyboard_for_spend(code, cost),
                parse_mode="Markdown"
            )
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–æ–¥ –∫–ª–∏–µ–Ω—Ç—É
        await bot.send_message(
            user_id,
            f"üî¢ –í–∞—à –∫–æ–¥: `{code}`\n"
            f"–ü–æ–∫–∞–∂–∏—Ç–µ –µ–≥–æ –∫–∞—Å—Å–∏—Ä—É –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è {product_name}.",
            reply_markup=get_client_menu(),
            parse_mode="Markdown"
        )
        await state.clear()  
    
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫–æ–¥–∞: {e}")
        await bot.send_message(user_id, "‚ö†Ô∏è –û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
            

@client_router.message(F.text == "üí∞ –ú–æ–∏ –±–∞–ª–ª—ã")
async def btn_my_points(message: Message):
    """
    –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –±–∞–ª–ª–æ–≤ –∫–ª–∏–Ω–µ—Ç–∞.
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –Ω–∞–ª–∏—á–∏–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –∫–ª–∏–µ–Ω—Ç–∞.
    """
    user_id = message.from_user.id
    client = get_client(user_id)

    if client:
        points = client[3]
        await message.answer(f"–ù–∞ –≤–∞—à–µ–º —Å—á—ë—Ç–µ: {points} –±–∞–ª–ª–æ–≤.",
                              reply_markup=get_client_menu())
    else:
        await message.answer("–í—ã –µ—â—ë –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã. –ù–∞–ø–∏—à–∏—Ç–µ /start")


@client_router.message(F.text == "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
async def btn_main_menu(message: Message):
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–ª–∏–µ–Ω—Ç–∞ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
    """
    await message.answer("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=get_client_menu())


@client_router.message(F.text == '‚ÑπÔ∏è –û –ø—Ä–æ–≥—Ä–∞–º–º–µ')
async def about_cafe(message: Message):
    """
    –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –æ–ø–∏—Å–∞–Ω–∏–µ –≤—ã–º—ã—à–ª–µ–Ω–Ω–æ–≥–æ –∫–∞—Ñ–µ.
    –î–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É–µ—Ç, –∫–∞–∫ –±—É–¥–µ—Ç –≤—ã–≥–ª—è–¥–µ—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –≤ —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–æ–µ–∫—Ç–µ.
    """
    info_text = """
üîó <b>BonusLinkerBot</b> ‚Äî —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ –ª–æ—è–ª—å–Ω–æ—Å—Ç–∏  
–í—ã –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –µ—ë –≤ –∫–∞—Ñ–µ, –º–∞–≥–∞–∑–∏–Ω–µ, —Å–∞–ª–æ–Ω–µ –∫—Ä–∞—Å–æ—Ç—ã –∏–ª–∏ –ª—é–±–æ–º –¥—Ä—É–≥–æ–º –±–∏–∑–Ω–µ—Å–µ.

üìç –ü—Ä–∏–º–µ—Ä —Ä–∞–±–æ—Ç—ã –≤ —Å—Ñ–µ—Ä–µ —Ñ—É–¥-—Ä–∏—Ç–µ–π–ª–∞:
1. –¶–µ–Ω—Ç—Ä–∞–ª—å–Ω–∞—è —Ç–æ—á–∫–∞ ‚Äî —É–ª. –ú–∏—Ä–∞, 25  
2. –í –¢–¶ ¬´–ü–∞—Ä—É—Å¬ª ‚Äî —ç—Ç–∞–∂ 1, —Ä—è–¥–æ–º —Å –≤—Ö–æ–¥–æ–º  
3. –ù–∞ –°–µ–≤–µ—Ä–Ω–æ–º –≤–æ–∫–∑–∞–ª–µ ‚Äî –∑–æ–Ω–∞ –æ—Ç–¥—ã—Ö–∞  

‚ú® –ö–∞–∫ –ø–æ–ª—É—á–∏—Ç—å –±–∞–ª–ª—ã:
‚Ä¢ –ó–∞ –∫–∞–∂–¥—ã–µ 100 ‚ÇΩ –≤ —á–µ–∫–µ ‚Äî 7 –±–∞–ª–ª–æ–≤  
‚Ä¢ –ü–æ–∫–∞–∂–∏—Ç–µ –∫–æ–¥ –∫–∞—Å—Å–∏—Ä—É –ø–æ—Å–ª–µ –ø–æ–∫—É–ø–∫–∏  

üõç –ß—Ç–æ –º–æ–∂–Ω–æ –ø–æ–ª—É—á–∏—Ç—å –∑–∞ –±–∞–ª–ª—ã:
üç™ –ü–µ—á–µ–Ω—å–µ ‚Äî 30 –±–∞–ª–ª–æ–≤  
üßã –ö–∞–ø—É—á–∏–Ω–æ ‚Äî 50 –±–∞–ª–ª–æ–≤  
ü•ê –ö—Ä—É–∞—Å—Å–∞–Ω ‚Äî 70 –±–∞–ª–ª–æ–≤  

üí° BonusLinkerBot –ª–µ–≥–∫–æ –∞–¥–∞–ø—Ç–∏—Ä—É–µ—Ç—Å—è –ø–æ–¥ –≤–∞—à –±–∏–∑–Ω–µ—Å:
‚Äî –í—ã–±–∏—Ä–∞–π—Ç–µ –Ω–∞—á–∏—Å–ª–µ–Ω–∏–µ –±–∞–ª–ª–æ–≤ –∑–∞ –ø–æ–∫—É–ø–∫–∏, –ø–æ—Å–µ—â–µ–Ω–∏—è, –ø–æ–¥–ø–∏—Å–∫–∏  
‚Äî –ù–∞–∑–Ω–∞—á–∞–π—Ç–µ –ø—Ä–∏–∑—ã: —Ç–æ–≤–∞—Ä—ã, —É—Å–ª—É–≥–∏, —Å–∫–∏–¥–∫–∏  
‚Äî –ê–≤—Ç–æ–º–∞—Ç–∏–∑–∏—Ä—É–π—Ç–µ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ —Å –∫–ª–∏–µ–Ω—Ç–∞–º–∏ –ø—Ä—è–º–æ –≤ Telegram
"""
    await message.answer(info_text, parse_mode="HTML")